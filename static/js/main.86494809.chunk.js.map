{"version":3,"sources":["App.js","serviceWorker.js","index.js","components/particles/index.jsx","assets/fonts/FreeSans-LrmZ.ttf","assets/fonts/Rubik.ttf"],"names":["Homepage","lazy","OurCrewPage","BlogPage","App","className","fallback","exact","path","render","to","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Particle","props","team","id","options","fpsLimit","interactivity","detectsOn","events","onClick","enable","mode","onHover","modes","bubble","distance","duration","opacity","size","push","quantity","repulse","particles","color","value","links","width","collisions","move","direction","outMode","random","speed","straight","number","density","value_area","shape","type","detectRetina","module","exports"],"mappings":"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","file":"static/js/main.86494809.chunk.js","sourcesContent":["import React, { Suspense, lazy } from \"react\";\r\nimport \"./App.css\";\r\n// import Homepage from \"./containers/homepage\";\r\n\r\n// import OurCrewPage from \"./containers/ourCrewPage\";\r\n// import BlogPage from './containers/blog';\r\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nconst Homepage = lazy(() => import('./containers/homepage'));\r\nconst OurCrewPage = lazy(() => import('./containers/ourCrewPage'));\r\nconst BlogPage = lazy(() => import('./containers/blog'));\r\n\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Suspense fallback={<span>Loading...</span>}>\r\n          <BrowserRouter>\r\n            <Switch>\r\n              <Route exact path=\"/\" render={() => <Homepage />} />\r\n              <Route exact path=\"/crew\" render={() => <OurCrewPage />} />\r\n              <Route exact path=\"/blog\" render={() => <BlogPage />} />\r\n              <Redirect to=\"/\" />\r\n            </Switch>\r\n          </BrowserRouter>\r\n        </Suspense>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport \"./assets/styles/tailwind.css\";\r\n\r\nimport './assets/fonts/FreeSans-LrmZ.ttf'\r\nimport './assets/fonts/Rubik.ttf';\r\nimport {Particle} from './components/particles'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React,{useEffect} from \"react\";\r\n// import Particles from 'react-particles-js';\r\nimport \"./particles.css\";\r\nimport Particles from \"react-tsparticles\";\r\n\r\n\r\nexport function Particle(props){\r\n    const {team} = props;\r\n    if(!team){\r\n        return(\r\n            <div >\r\n                <Particles\r\n                    id=\"tsparticles\"\r\n                    className='spider'\r\n                    options={{\r\n                    fpsLimit: 60,\r\n                    interactivity: {\r\n                        detectsOn: \"canvas\",\r\n                        events: {\r\n                        onClick: {\r\n                            enable: true,\r\n                            mode: \"push\",\r\n                        },\r\n                        onHover: {\r\n                            enable: true,\r\n                            mode: \"repulse\",\r\n                        },\r\n                        },\r\n                        modes: {\r\n                        bubble: {\r\n                            distance: 400,\r\n                            duration: 2,\r\n                            opacity: 0.8,\r\n                            size: 40,\r\n                        },\r\n                        push: {\r\n                            quantity: 4,\r\n                        },\r\n                        repulse: {\r\n                            distance: 200,\r\n                            duration: 0.4,\r\n                        },\r\n                        },\r\n                    },\r\n                    particles: {\r\n                        color: {\r\n                        value: \"#DD038F\",\r\n                        },\r\n                        links: {\r\n                        color: \"#DD038F\",\r\n                        distance: 150,\r\n                        enable: true,\r\n                        opacity: 0.5,\r\n                        width: 1,\r\n                        },\r\n                        collisions: {\r\n                        enable: true,\r\n                        },\r\n                        move: {\r\n                        direction: \"none\",\r\n                        enable: true,\r\n                        outMode: \"bounce\",\r\n                        random: false,\r\n                        speed: 6,\r\n                        straight: false,\r\n                        },\r\n                        number: {\r\n                        density: {\r\n                            enable: true,\r\n                            value_area: 800,\r\n                        },\r\n                        value: 15,\r\n                        },\r\n                        opacity: {\r\n                        value: 0.5,\r\n                        },\r\n                        shape: {\r\n                        type: \"circle\",\r\n                        },\r\n                        size: {\r\n                        random: true,\r\n                        value: 3,\r\n                        },\r\n                    },\r\n                    detectRetina: true,\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n            }\r\n    else{\r\n        return(\r\n            <div >\r\n                <Particles\r\n                    id=\"tsparticles\"\r\n                    className='spider-crew'\r\n                    options={{\r\n                    \r\n                    fpsLimit: 60,\r\n                    interactivity: {\r\n                        detectsOn: \"canvas\",\r\n                        events: {\r\n                        onClick: {\r\n                            enable: true,\r\n                            mode: \"push\",\r\n                        },\r\n                        onHover: {\r\n                            enable: true,\r\n                            mode: \"repulse\",\r\n                        },\r\n                        },\r\n                        modes: {\r\n                        bubble: {\r\n                            distance: 400,\r\n                            duration: 2,\r\n                            opacity: 0.8,\r\n                            size: 40,\r\n                        },\r\n                        push: {\r\n                            quantity: 4,\r\n                        },\r\n                        repulse: {\r\n                            distance: 200,\r\n                            duration: 0.4,\r\n                        },\r\n                        },\r\n                    },\r\n                    particles: {\r\n                        \r\n                        color: {\r\n                        value: \"#460c5e\",\r\n                        },\r\n                        links: {\r\n                        color: \"#DD038F\",\r\n                        distance: 150,\r\n                        enable: true,\r\n                        opacity: 0.5,\r\n                        width: 1,\r\n                        },\r\n                        collisions: {\r\n                        enable: true,\r\n                        },\r\n                        move: {\r\n                        direction: \"none\",\r\n                        enable: true,\r\n                        outMode: \"bounce\",\r\n                        random: false,\r\n                        speed: 6,\r\n                        straight: false,\r\n                        },\r\n                        number: {\r\n                        density: {\r\n                            enable: true,\r\n                            value_area: 800,\r\n                        },\r\n                        value: 40,\r\n                        },\r\n                        opacity: {\r\n                        value: 0.5,\r\n                        },\r\n                        shape: {\r\n                        type: \"circle\",\r\n                        },\r\n                        size: {\r\n                        random: true,\r\n                        value: 3,\r\n                        },\r\n                    },\r\n                    detectRetina: true,\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"static/media/FreeSans-LrmZ.f8f89c1c.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Rubik.071fcca9.ttf\";"],"sourceRoot":""}